
// This is an autogenerated file from Firebase Studio.

import { initializeApp, getApps, getApp, type FirebaseApp } from "firebase/app";
import { getFirestore, type Firestore } from "firebase/firestore";

// !! VERY IMPORTANT: IF YOU ARE STILL SEEING "Module not found: Can't resolve 'firebase/auth'" !!
// This error almost always means your project's environment is the issue.
// The 'firebase' package might not be correctly installed or is corrupted in your 'node_modules' folder,
// or Next.js's build cache (in the '.next' folder) is stale.
//
// YOU **MUST** MANUALLY PERFORM THESE STEPS CAREFULLY TO FIX THIS:
//   1. Stop your Next.js development server (e.g., Ctrl+C in the terminal).
//   2. Delete your 'node_modules' folder.
//   3. Delete your 'package-lock.json' (or 'yarn.lock' / 'pnpm-lock.yaml').
//   4. Delete the '.next' folder (this is Next.js's build cache).
//   5. Run 'npm install' (or 'yarn install' / 'pnpm install') in your terminal to reinstall all dependencies cleanly.
//   6. Restart your development server (e.g., 'npm run dev').
//
// This process resolves the vast majority of 'module not found' issues for installed packages.
// If the error persists after these steps, also try running 'next dev' (without --turbopack)
// to see if it's a Turbopack-specific issue.
import {
  getAuth,
  type Auth,
  createUserWithEmailAndPassword as firebaseOpCreateUserWithEmailAndPassword,
  signInWithEmailAndPassword as firebaseOpSignInWithEmailAndPassword,
  signOut as firebaseOpSignOut,
  updateProfile as firebaseOpUpdateProfile,
  type UserCredential as FirebaseUserCredentialType,
  type User as FirebaseUserType
} from "firebase/auth";

// Firebase configuration sourced from environment variables
const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,
  measurementId: process.env.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID, // Optional: for Firebase Analytics
};

// Detailed logging for debugging environment variable loading
console.log("Attempting to load Firebase config from environment variables:");
console.log("NEXT_PUBLIC_FIREBASE_API_KEY:", process.env.NEXT_PUBLIC_FIREBASE_API_KEY ? "Loaded" : "MISSING or UNDEFINED");
console.log("NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN:", process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN ? "Loaded" : "MISSING or UNDEFINED");
console.log("NEXT_PUBLIC_FIREBASE_PROJECT_ID:", process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID ? "Loaded" : "MISSING or UNDEFINED");
console.log("NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET:", process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET ? "Loaded" : "MISSING or UNDEFINED");
console.log("NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID:", process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID ? "Loaded" : "MISSING or UNDEFINED");
console.log("NEXT_PUBLIC_FIREBASE_APP_ID:", process.env.NEXT_PUBLIC_FIREBASE_APP_ID ? "Loaded" : "MISSING or UNDEFINED");


let app: FirebaseApp | undefined = undefined;
let db: Firestore | null = null;
let authInstance: Auth | null = null;

const essentialConfigPresent =
  firebaseConfig.apiKey &&
  firebaseConfig.authDomain &&
  firebaseConfig.projectId;

if (essentialConfigPresent) {
  console.log("Essential Firebase config (API Key, Auth Domain, Project ID) detected. Initializing Firebase...");
  if (!getApps().length) {
    try {
      app = initializeApp(firebaseConfig);
      console.log("Firebase app initialized successfully.");
    } catch (error) {
      console.error("Error initializing Firebase app:", error);
    }
  } else {
    app = getApp();
    console.log("Using existing Firebase app instance.");
  }

  if (app) {
    try {
      db = getFirestore(app);
      authInstance = getAuth(app); // This line requires 'firebase/auth' to be resolvable by the build system
      console.log("Firestore and Auth services initialized.");
    } catch (error) {
        console.error("Error initializing Firestore or Auth:", error);
        db = null;
        authInstance = null;
    }
  }
} else {
  console.warn(
    "CRITICAL ERROR: Essential Firebase configuration (API Key, Auth Domain, Project ID) is MISSING. " +
    "Firebase services will NOT be initialized. Please ensure these environment variables are correctly set: " +
    "NEXT_PUBLIC_FIREBASE_API_KEY, NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN, NEXT_PUBLIC_FIREBASE_PROJECT_ID."
  );
}

export { app, db, authInstance as auth };

// Re-export auth operations and types for firebase-auth-operations.ts
// These re-exports also depend on 'firebase/auth' being resolvable by the build system.
export {
  firebaseOpCreateUserWithEmailAndPassword,
  firebaseOpSignInWithEmailAndPassword,
  firebaseOpSignOut,
  firebaseOpUpdateProfile,
};
export type { FirebaseUserCredentialType, FirebaseUserType, Auth as FirebaseAuthInstanceExportType };
