// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview A video moderation AI agent.
 *
 * - moderateVideo - A function that handles the video moderation process.
 * - ModerateVideoInput - The input type for the moderateVideo function.
 * - ModerateVideoOutput - The return type for the moderateVideo function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ModerateVideoInputSchema = z.object({
  videoDataUri: z
    .string()
    .describe(
      "A video file, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
  communityGuidelines: z
    .string()
    .describe('The community guidelines to check the video against.'),
});
export type ModerateVideoInput = z.infer<typeof ModerateVideoInputSchema>;

const ModerateVideoOutputSchema = z.object({
  isCompliant: z
    .boolean()
    .describe(
      'Whether or not the video is compliant with community guidelines.'
    ),
  flaggedReasons: z
    .array(z.string())
    .describe('The reasons why the video was flagged.'),
  summary: z.string().describe('A summary of the video content.'),
});
export type ModerateVideoOutput = z.infer<typeof ModerateVideoOutputSchema>;

export async function moderateVideo(input: ModerateVideoInput): Promise<ModerateVideoOutput> {
  return moderateVideoFlow(input);
}

const prompt = ai.definePrompt({
  name: 'moderateVideoPrompt',
  input: {schema: ModerateVideoInputSchema},
  output: {schema: ModerateVideoOutputSchema},
  prompt: `You are an AI video moderation expert. Your task is to analyze videos and determine if they comply with the provided community guidelines.

Community Guidelines: {{{communityGuidelines}}}

Analyze the following video:
{{media url=videoDataUri}}

Based on the video content and the community guidelines, determine if the video is compliant. Provide a summary of the video content and list any reasons why the video was flagged. If the video complies, the flaggedReasons array should be empty and isCompliant should be true.

Output should be in JSON format.`,
});

const moderateVideoFlow = ai.defineFlow(
  {
    name: 'moderateVideoFlow',
    inputSchema: ModerateVideoInputSchema,
    outputSchema: ModerateVideoOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
